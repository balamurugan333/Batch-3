from IPython import get_ipython
from IPython.display import display
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from datetime import datetime
import os

# --- Data Loading and Initial Analysis ---
file_path = "stock_price_sample.csv"  # Update the path if needed
# In Colab, you might need to upload this file or access it from Google Drive.
# For example, to upload:
# from google.colab import files
# uploaded = files.upload()
# If using Drive:
# from google.colab import drive
# drive.mount('/content/drive')
# file_path = '/content/drive/My Drive/your_folder/stock_price_sample.csv'

try:
    df = pd.read_csv(file_path)
    print("Original DataFrame:")
    display(df.head())
    print(df.shape)

    # Convert 'Date' column to datetime objects
    df['Date'] = pd.to_datetime(df['Date'])
    df.set_index('Date', inplace=True)

    print("\nData Types:\n", df.dtypes)
    print("\nMissing Values:\n", df.isnull().sum())
    print("\nDescriptive Statistics:\n", df.describe())

    # Analyze unique values and cardinality
    for col in df.columns:
        if df[col].dtype == 'object':  # Check for categorical columns
            print(f"\nUnique values in '{col}': {df[col].unique()}")
            print(f"Cardinality of '{col}': {df[col].nunique()}")

    print(f"\nShape of DataFrame: {df.shape}")
    print("\nFirst few rows after setting Date index:\n", df.head())

except FileNotFoundError:
    print("Error: 'stock_price_sample.csv' not found. Please ensure the file is in the correct location.")
except Exception as e:
    print(f"An error occurred during data loading or initial analysis: {e}")


# --- Data Analysis and Visualization ---
if 'df' in locals() and not df.empty:
    # Calculate descriptive statistics for price columns
    price_cols = ['Open', 'High', 'Low', 'Close']
    print("\nDescriptive Statistics for Price Columns:\n", df[price_cols].describe())

    # Calculate the correlation between 'Open' and 'Close' prices
    if 'Open' in df.columns and 'Close' in df.columns:
        correlation = df['Open'].corr(df['Close'])
        print(f"\nCorrelation between 'Open' and 'Close' prices: {correlation}")

    # Visualize the data
    plt.figure(figsize=(10, 4))
    plt.plot(df['Close'], label='Close Price')
    plt.title('Stock Close Price Over Time')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Histograms for price columns
    plt.figure(figsize=(12, 8))
    for i, col in enumerate(price_cols):
        if col in df.columns:
            plt.subplot(2, 2, i + 1)
            plt.hist(df[col], bins=10, color='skyblue', edgecolor='black')
            plt.title(f'Distribution of {col} Price')
            plt.xlabel(col)
            plt.ylabel('Frequency')
    plt.tight_layout()
    plt.show()

    # Box plots for price columns
    plt.figure(figsize=(12, 6))
    if all(col in df.columns for col in price_cols):
      df.boxplot(column=price_cols)
      plt.title('Box Plots of Price Columns')
      plt.ylabel('Price')
      plt.show()
    else:
      print("Not all price columns found for box plot.")


    # --- Feature Engineering and Model Training ---
    # Feature Engineering: Create lag features for time series modeling
    df['Prev_Close'] = df['Close'].shift(1)
    df.dropna(inplace=True)

    if not df.empty:
        # Define features and target
        X = df[['Prev_Close']]
        y = df['Close']

        # Train-test split
        # Ensure enough samples for splitting
        if len(df) > 1:
            X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)

            # Model training
            model = LinearRegression()
            model.fit(X_train, y_train)

            # Prediction
            y_pred = model.predict(X_test)

            # Evaluate performance
            mse = mean_squared_error(y_test, y_pred)
            print(f"\nMean Squared Error: {mse:.2f}")

            # Plot predictions vs actual
            plt.figure(figsize=(10, 4))
            plt.plot(y_test.index, y_test, label='Actual')
            plt.plot(y_test.index, y_pred, label='Predicted')
            plt.title('Actual vs Predicted Close Prices')
            plt.xlabel('Date')
            plt.ylabel('Close Price')
            plt.legend()
            plt.grid(True)
            plt.tight_layout()
            plt.show()
        else:
            print("\nNot enough data after dropping NaNs to perform train-test split and modeling.")
    else:
        print("\nDataFrame is empty after dropping NaNs. Cannot perform feature engineering or modeling.")

else:
    print("\nDataFrame not loaded or is empty. Cannot proceed with analysis, visualization, or modeling.")
